#Метод квадратных корней
import numpy as np

# Входные данные - пример из практики
A = np.array([[1, 1, 1], [1, 2, 2], [1, 2, 3]])
b = np.array([3, 5, 6])


# Метод Холецкого
n = A.shape[0]  # Определяем размерность матрицы
L = np.zeros_like(A)  # Создаем нулевую матрицу L той же размерности, что и A

for j in range(n):  # Итерируемся по столбцам матрицы
    # Рассчитываем элемент диагонали матрицы L
    L[j, j] = np.sqrt(A[j, j] - np.sum(L[j, :]**2))
    for i in range(j+1, n):  # Итерируемся по строкам матрицы, начиная со следующей за j
        # Рассчитываем оставшиеся элементы матрицы L
        L[i, j] = (A[i, j] - np.sum(L[i, :j]*L[j, :j])) / L[j, j]

# Вычисляем матрицу L методом Холецкого

# Решаем первую СЛАУ для нахождения вектора y
y = np.linalg.solve(L, b)

# Решаем вторую СЛАУ для нахождения вектора x
x = np.linalg.solve(L.T, y)

# Решаем две СЛАУ для нахождения векторов y и x с помощью функции solve из библиотеки NumPy

# Выводим результаты
# print("Матрица A:")
# print(*A)
# print("Вектор b:")
# print(*b)
# print("Матрица L:")
# print(*L)
# print("Вектор y:")
# print(*y)
# print("Вектор x:")
# print(*x)
print(f'Матрица A:\n{A}\n\nВектор b:\n{b}\n\nМатрица L:\n{L}\n\nВектор y:\n{y}\n\nВектор x:\n{x}')